package com.example.melaAttendance.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BILL_DETAILS_DATA".
*/
public class BillDetailsDataDao extends AbstractDao<BillDetailsData, Void> {

    public static final String TABLENAME = "BILL_DETAILS_DATA";

    /**
     * Properties of entity BillDetailsData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BillId = new Property(0, Long.class, "billId", false, "BILL_ID");
        public final static Property BillNo = new Property(1, String.class, "billNo", false, "BILL_NO");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Total_amount = new Property(4, int.class, "total_amount", false, "TOTAL_AMOUNT");
        public final static Property Shg_code = new Property(5, String.class, "shg_code", false, "SHG_CODE");
    }


    public BillDetailsDataDao(DaoConfig config) {
        super(config);
    }
    
    public BillDetailsDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL_DETAILS_DATA\" (" + //
                "\"BILL_ID\" INTEGER," + // 0: billId
                "\"BILL_NO\" TEXT," + // 1: billNo
                "\"DATE\" TEXT," + // 2: date
                "\"TIME\" TEXT," + // 3: time
                "\"TOTAL_AMOUNT\" INTEGER NOT NULL ," + // 4: total_amount
                "\"SHG_CODE\" TEXT);"); // 5: shg_code
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL_DETAILS_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BillDetailsData entity) {
        stmt.clearBindings();
 
        Long billId = entity.getBillId();
        if (billId != null) {
            stmt.bindLong(1, billId);
        }
 
        String billNo = entity.getBillNo();
        if (billNo != null) {
            stmt.bindString(2, billNo);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
        stmt.bindLong(5, entity.getTotal_amount());
 
        String shg_code = entity.getShg_code();
        if (shg_code != null) {
            stmt.bindString(6, shg_code);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BillDetailsData entity) {
        stmt.clearBindings();
 
        Long billId = entity.getBillId();
        if (billId != null) {
            stmt.bindLong(1, billId);
        }
 
        String billNo = entity.getBillNo();
        if (billNo != null) {
            stmt.bindString(2, billNo);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
        stmt.bindLong(5, entity.getTotal_amount());
 
        String shg_code = entity.getShg_code();
        if (shg_code != null) {
            stmt.bindString(6, shg_code);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BillDetailsData readEntity(Cursor cursor, int offset) {
        BillDetailsData entity = new BillDetailsData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // billId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // billNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.getInt(offset + 4), // total_amount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // shg_code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BillDetailsData entity, int offset) {
        entity.setBillId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotal_amount(cursor.getInt(offset + 4));
        entity.setShg_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BillDetailsData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BillDetailsData entity) {
        return null;
    }

    @Override
    public boolean hasKey(BillDetailsData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
