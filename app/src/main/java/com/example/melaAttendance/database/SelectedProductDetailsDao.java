package com.example.melaAttendance.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SELECTED_PRODUCT_DETAILS".
*/
public class SelectedProductDetailsDao extends AbstractDao<SelectedProductDetails, Long> {

    public static final String TABLENAME = "SELECTED_PRODUCT_DETAILS";

    /**
     * Properties of entity SelectedProductDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AutoGeneratedProductId = new Property(0, Long.class, "autoGeneratedProductId", true, "_id");
        public final static Property ProductId = new Property(1, String.class, "productId", false, "PRODUCT_ID");
        public final static Property ProductName = new Property(2, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property ProductQuantity = new Property(3, String.class, "productQuantity", false, "PRODUCT_QUANTITY");
        public final static Property ProductUnitPrice = new Property(4, String.class, "productUnitPrice", false, "PRODUCT_UNIT_PRICE");
        public final static Property ProductTotalPrice = new Property(5, String.class, "productTotalPrice", false, "PRODUCT_TOTAL_PRICE");
    }


    public SelectedProductDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public SelectedProductDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SELECTED_PRODUCT_DETAILS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: autoGeneratedProductId
                "\"PRODUCT_ID\" TEXT," + // 1: productId
                "\"PRODUCT_NAME\" TEXT," + // 2: productName
                "\"PRODUCT_QUANTITY\" TEXT," + // 3: productQuantity
                "\"PRODUCT_UNIT_PRICE\" TEXT," + // 4: productUnitPrice
                "\"PRODUCT_TOTAL_PRICE\" TEXT);"); // 5: productTotalPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SELECTED_PRODUCT_DETAILS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SelectedProductDetails entity) {
        stmt.clearBindings();
 
        Long autoGeneratedProductId = entity.getAutoGeneratedProductId();
        if (autoGeneratedProductId != null) {
            stmt.bindLong(1, autoGeneratedProductId);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(2, productId);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(3, productName);
        }
 
        String productQuantity = entity.getProductQuantity();
        if (productQuantity != null) {
            stmt.bindString(4, productQuantity);
        }
 
        String productUnitPrice = entity.getProductUnitPrice();
        if (productUnitPrice != null) {
            stmt.bindString(5, productUnitPrice);
        }
 
        String productTotalPrice = entity.getProductTotalPrice();
        if (productTotalPrice != null) {
            stmt.bindString(6, productTotalPrice);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SelectedProductDetails entity) {
        stmt.clearBindings();
 
        Long autoGeneratedProductId = entity.getAutoGeneratedProductId();
        if (autoGeneratedProductId != null) {
            stmt.bindLong(1, autoGeneratedProductId);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(2, productId);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(3, productName);
        }
 
        String productQuantity = entity.getProductQuantity();
        if (productQuantity != null) {
            stmt.bindString(4, productQuantity);
        }
 
        String productUnitPrice = entity.getProductUnitPrice();
        if (productUnitPrice != null) {
            stmt.bindString(5, productUnitPrice);
        }
 
        String productTotalPrice = entity.getProductTotalPrice();
        if (productTotalPrice != null) {
            stmt.bindString(6, productTotalPrice);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SelectedProductDetails readEntity(Cursor cursor, int offset) {
        SelectedProductDetails entity = new SelectedProductDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // autoGeneratedProductId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // productId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // productName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productQuantity
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // productUnitPrice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // productTotalPrice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SelectedProductDetails entity, int offset) {
        entity.setAutoGeneratedProductId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProductName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductQuantity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductUnitPrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProductTotalPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SelectedProductDetails entity, long rowId) {
        entity.setAutoGeneratedProductId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SelectedProductDetails entity) {
        if(entity != null) {
            return entity.getAutoGeneratedProductId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SelectedProductDetails entity) {
        return entity.getAutoGeneratedProductId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
