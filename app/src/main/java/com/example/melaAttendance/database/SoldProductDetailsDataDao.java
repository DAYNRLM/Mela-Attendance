package com.example.melaAttendance.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SOLD_PRODUCT_DETAILS_DATA".
*/
public class SoldProductDetailsDataDao extends AbstractDao<SoldProductDetailsData, Long> {

    public static final String TABLENAME = "SOLD_PRODUCT_DETAILS_DATA";

    /**
     * Properties of entity SoldProductDetailsData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Product_id = new Property(0, Long.class, "product_id", true, "_id");
        public final static Property Product_name = new Property(1, String.class, "product_name", false, "PRODUCT_NAME");
        public final static Property GetProduct_quantity_sold = new Property(2, String.class, "getProduct_quantity_sold", false, "GET_PRODUCT_QUANTITY_SOLD");
        public final static Property Unit_price = new Property(3, int.class, "unit_price", false, "UNIT_PRICE");
        public final static Property Total_amount = new Property(4, int.class, "total_amount", false, "TOTAL_AMOUNT");
        public final static Property Bill_invoice = new Property(5, String.class, "bill_invoice", false, "BILL_INVOICE");
        public final static Property Sold_product_id = new Property(6, String.class, "sold_product_id", false, "SOLD_PRODUCT_ID");
    }


    public SoldProductDetailsDataDao(DaoConfig config) {
        super(config);
    }
    
    public SoldProductDetailsDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SOLD_PRODUCT_DETAILS_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: product_id
                "\"PRODUCT_NAME\" TEXT," + // 1: product_name
                "\"GET_PRODUCT_QUANTITY_SOLD\" TEXT," + // 2: getProduct_quantity_sold
                "\"UNIT_PRICE\" INTEGER NOT NULL ," + // 3: unit_price
                "\"TOTAL_AMOUNT\" INTEGER NOT NULL ," + // 4: total_amount
                "\"BILL_INVOICE\" TEXT," + // 5: bill_invoice
                "\"SOLD_PRODUCT_ID\" TEXT);"); // 6: sold_product_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SOLD_PRODUCT_DETAILS_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SoldProductDetailsData entity) {
        stmt.clearBindings();
 
        Long product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindLong(1, product_id);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(2, product_name);
        }
 
        String getProduct_quantity_sold = entity.getGetProduct_quantity_sold();
        if (getProduct_quantity_sold != null) {
            stmt.bindString(3, getProduct_quantity_sold);
        }
        stmt.bindLong(4, entity.getUnit_price());
        stmt.bindLong(5, entity.getTotal_amount());
 
        String bill_invoice = entity.getBill_invoice();
        if (bill_invoice != null) {
            stmt.bindString(6, bill_invoice);
        }
 
        String sold_product_id = entity.getSold_product_id();
        if (sold_product_id != null) {
            stmt.bindString(7, sold_product_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SoldProductDetailsData entity) {
        stmt.clearBindings();
 
        Long product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindLong(1, product_id);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(2, product_name);
        }
 
        String getProduct_quantity_sold = entity.getGetProduct_quantity_sold();
        if (getProduct_quantity_sold != null) {
            stmt.bindString(3, getProduct_quantity_sold);
        }
        stmt.bindLong(4, entity.getUnit_price());
        stmt.bindLong(5, entity.getTotal_amount());
 
        String bill_invoice = entity.getBill_invoice();
        if (bill_invoice != null) {
            stmt.bindString(6, bill_invoice);
        }
 
        String sold_product_id = entity.getSold_product_id();
        if (sold_product_id != null) {
            stmt.bindString(7, sold_product_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SoldProductDetailsData readEntity(Cursor cursor, int offset) {
        SoldProductDetailsData entity = new SoldProductDetailsData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // product_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // product_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // getProduct_quantity_sold
            cursor.getInt(offset + 3), // unit_price
            cursor.getInt(offset + 4), // total_amount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bill_invoice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // sold_product_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SoldProductDetailsData entity, int offset) {
        entity.setProduct_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProduct_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGetProduct_quantity_sold(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUnit_price(cursor.getInt(offset + 3));
        entity.setTotal_amount(cursor.getInt(offset + 4));
        entity.setBill_invoice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSold_product_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SoldProductDetailsData entity, long rowId) {
        entity.setProduct_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SoldProductDetailsData entity) {
        if(entity != null) {
            return entity.getProduct_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SoldProductDetailsData entity) {
        return entity.getProduct_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
