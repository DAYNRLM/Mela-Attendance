package com.example.melaAttendance.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTENDANCE_FLAG_DATA".
*/
public class AttendanceFlagDataDao extends AbstractDao<AttendanceFlagData, Long> {

    public static final String TABLENAME = "ATTENDANCE_FLAG_DATA";

    /**
     * Properties of entity AttendanceFlagData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AutogeneratedFlagId = new Property(0, Long.class, "autogeneratedFlagId", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property ParticipantFlag = new Property(2, String.class, "participantFlag", false, "PARTICIPANT_FLAG");
        public final static Property ShgRegIdAttendanceFlagData = new Property(3, String.class, "shgRegIdAttendanceFlagData", false, "SHG_REG_ID_ATTENDANCE_FLAG_DATA");
        public final static Property DateOfAttendanceFlagData = new Property(4, String.class, "dateOfAttendanceFlagData", false, "DATE_OF_ATTENDANCE_FLAG_DATA");
        public final static Property ParticipantSataus = new Property(5, String.class, "participantSataus", false, "PARTICIPANT_SATAUS");
        public final static Property MelaId = new Property(6, String.class, "melaId", false, "MELA_ID");
        public final static Property MorningFlag = new Property(7, String.class, "morningFlag", false, "MORNING_FLAG");
        public final static Property EeningFlag = new Property(8, String.class, "eeningFlag", false, "EENING_FLAG");
    }


    public AttendanceFlagDataDao(DaoConfig config) {
        super(config);
    }
    
    public AttendanceFlagDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTENDANCE_FLAG_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: autogeneratedFlagId
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"PARTICIPANT_FLAG\" TEXT," + // 2: participantFlag
                "\"SHG_REG_ID_ATTENDANCE_FLAG_DATA\" TEXT," + // 3: shgRegIdAttendanceFlagData
                "\"DATE_OF_ATTENDANCE_FLAG_DATA\" TEXT," + // 4: dateOfAttendanceFlagData
                "\"PARTICIPANT_SATAUS\" TEXT," + // 5: participantSataus
                "\"MELA_ID\" TEXT," + // 6: melaId
                "\"MORNING_FLAG\" TEXT," + // 7: morningFlag
                "\"EENING_FLAG\" TEXT);"); // 8: eeningFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTENDANCE_FLAG_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AttendanceFlagData entity) {
        stmt.clearBindings();
 
        Long autogeneratedFlagId = entity.getAutogeneratedFlagId();
        if (autogeneratedFlagId != null) {
            stmt.bindLong(1, autogeneratedFlagId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String participantFlag = entity.getParticipantFlag();
        if (participantFlag != null) {
            stmt.bindString(3, participantFlag);
        }
 
        String shgRegIdAttendanceFlagData = entity.getShgRegIdAttendanceFlagData();
        if (shgRegIdAttendanceFlagData != null) {
            stmt.bindString(4, shgRegIdAttendanceFlagData);
        }
 
        String dateOfAttendanceFlagData = entity.getDateOfAttendanceFlagData();
        if (dateOfAttendanceFlagData != null) {
            stmt.bindString(5, dateOfAttendanceFlagData);
        }
 
        String participantSataus = entity.getParticipantSataus();
        if (participantSataus != null) {
            stmt.bindString(6, participantSataus);
        }
 
        String melaId = entity.getMelaId();
        if (melaId != null) {
            stmt.bindString(7, melaId);
        }
 
        String morningFlag = entity.getMorningFlag();
        if (morningFlag != null) {
            stmt.bindString(8, morningFlag);
        }
 
        String eeningFlag = entity.getEeningFlag();
        if (eeningFlag != null) {
            stmt.bindString(9, eeningFlag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AttendanceFlagData entity) {
        stmt.clearBindings();
 
        Long autogeneratedFlagId = entity.getAutogeneratedFlagId();
        if (autogeneratedFlagId != null) {
            stmt.bindLong(1, autogeneratedFlagId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String participantFlag = entity.getParticipantFlag();
        if (participantFlag != null) {
            stmt.bindString(3, participantFlag);
        }
 
        String shgRegIdAttendanceFlagData = entity.getShgRegIdAttendanceFlagData();
        if (shgRegIdAttendanceFlagData != null) {
            stmt.bindString(4, shgRegIdAttendanceFlagData);
        }
 
        String dateOfAttendanceFlagData = entity.getDateOfAttendanceFlagData();
        if (dateOfAttendanceFlagData != null) {
            stmt.bindString(5, dateOfAttendanceFlagData);
        }
 
        String participantSataus = entity.getParticipantSataus();
        if (participantSataus != null) {
            stmt.bindString(6, participantSataus);
        }
 
        String melaId = entity.getMelaId();
        if (melaId != null) {
            stmt.bindString(7, melaId);
        }
 
        String morningFlag = entity.getMorningFlag();
        if (morningFlag != null) {
            stmt.bindString(8, morningFlag);
        }
 
        String eeningFlag = entity.getEeningFlag();
        if (eeningFlag != null) {
            stmt.bindString(9, eeningFlag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AttendanceFlagData readEntity(Cursor cursor, int offset) {
        AttendanceFlagData entity = new AttendanceFlagData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // autogeneratedFlagId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // participantFlag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shgRegIdAttendanceFlagData
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dateOfAttendanceFlagData
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // participantSataus
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // melaId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // morningFlag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // eeningFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AttendanceFlagData entity, int offset) {
        entity.setAutogeneratedFlagId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParticipantFlag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShgRegIdAttendanceFlagData(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDateOfAttendanceFlagData(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setParticipantSataus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMelaId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMorningFlag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEeningFlag(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AttendanceFlagData entity, long rowId) {
        entity.setAutogeneratedFlagId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AttendanceFlagData entity) {
        if(entity != null) {
            return entity.getAutogeneratedFlagId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AttendanceFlagData entity) {
        return entity.getAutogeneratedFlagId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
