package com.example.melaAttendance.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHGS_DETAILS_ON_LOGIN_DATA".
*/
public class ShgsDetailsOnLoginDataDao extends AbstractDao<ShgsDetailsOnLoginData, Void> {

    public static final String TABLENAME = "SHGS_DETAILS_ON_LOGIN_DATA";

    /**
     * Properties of entity ShgsDetailsOnLoginData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ShgRegistrationId = new Property(0, int.class, "shgRegistrationId", false, "SHG_REGISTRATION_ID");
        public final static Property ShgCode = new Property(1, String.class, "shgCode", false, "SHG_CODE");
        public final static Property ShgName = new Property(2, String.class, "shgName", false, "SHG_NAME");
        public final static Property LoginMobilenumber = new Property(3, String.class, "loginMobilenumber", false, "LOGIN_MOBILENUMBER");
        public final static Property MelaId = new Property(4, int.class, "melaId", false, "MELA_ID");
        public final static Property StallNo = new Property(5, String.class, "stallNo", false, "STALL_NO");
    }


    public ShgsDetailsOnLoginDataDao(DaoConfig config) {
        super(config);
    }
    
    public ShgsDetailsOnLoginDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHGS_DETAILS_ON_LOGIN_DATA\" (" + //
                "\"SHG_REGISTRATION_ID\" INTEGER NOT NULL ," + // 0: shgRegistrationId
                "\"SHG_CODE\" TEXT," + // 1: shgCode
                "\"SHG_NAME\" TEXT," + // 2: shgName
                "\"LOGIN_MOBILENUMBER\" TEXT," + // 3: loginMobilenumber
                "\"MELA_ID\" INTEGER NOT NULL ," + // 4: melaId
                "\"STALL_NO\" TEXT);"); // 5: stallNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHGS_DETAILS_ON_LOGIN_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShgsDetailsOnLoginData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getShgRegistrationId());
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(2, shgCode);
        }
 
        String shgName = entity.getShgName();
        if (shgName != null) {
            stmt.bindString(3, shgName);
        }
 
        String loginMobilenumber = entity.getLoginMobilenumber();
        if (loginMobilenumber != null) {
            stmt.bindString(4, loginMobilenumber);
        }
        stmt.bindLong(5, entity.getMelaId());
 
        String stallNo = entity.getStallNo();
        if (stallNo != null) {
            stmt.bindString(6, stallNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShgsDetailsOnLoginData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getShgRegistrationId());
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(2, shgCode);
        }
 
        String shgName = entity.getShgName();
        if (shgName != null) {
            stmt.bindString(3, shgName);
        }
 
        String loginMobilenumber = entity.getLoginMobilenumber();
        if (loginMobilenumber != null) {
            stmt.bindString(4, loginMobilenumber);
        }
        stmt.bindLong(5, entity.getMelaId());
 
        String stallNo = entity.getStallNo();
        if (stallNo != null) {
            stmt.bindString(6, stallNo);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ShgsDetailsOnLoginData readEntity(Cursor cursor, int offset) {
        ShgsDetailsOnLoginData entity = new ShgsDetailsOnLoginData( //
            cursor.getInt(offset + 0), // shgRegistrationId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shgCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shgName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // loginMobilenumber
            cursor.getInt(offset + 4), // melaId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // stallNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShgsDetailsOnLoginData entity, int offset) {
        entity.setShgRegistrationId(cursor.getInt(offset + 0));
        entity.setShgCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShgName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLoginMobilenumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMelaId(cursor.getInt(offset + 4));
        entity.setStallNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ShgsDetailsOnLoginData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ShgsDetailsOnLoginData entity) {
        return null;
    }

    @Override
    public boolean hasKey(ShgsDetailsOnLoginData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
