package com.example.melaAttendance.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHG_MEMBER_DETAILS_DATA".
*/
public class ShgMemberDetailsDataDao extends AbstractDao<ShgMemberDetailsData, Void> {

    public static final String TABLENAME = "SHG_MEMBER_DETAILS_DATA";

    /**
     * Properties of entity ShgMemberDetailsData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Category_name = new Property(0, String.class, "category_name", false, "CATEGORY_NAME");
        public final static Property Shg_member_code = new Property(1, String.class, "shg_member_code", false, "SHG_MEMBER_CODE");
        public final static Property Ass_name = new Property(2, String.class, "ass_name", false, "ASS_NAME");
        public final static Property Mobile = new Property(3, String.class, "mobile", false, "MOBILE");
        public final static Property Subcategory_name = new Property(4, String.class, "subcategory_name", false, "SUBCATEGORY_NAME");
        public final static Property Member_name = new Property(5, String.class, "member_name", false, "MEMBER_NAME");
        public final static Property Product_name = new Property(6, String.class, "product_name", false, "PRODUCT_NAME");
        public final static Property Subcategory_id = new Property(7, int.class, "subcategory_id", false, "SUBCATEGORY_ID");
        public final static Property District_name = new Property(8, String.class, "district_name", false, "DISTRICT_NAME");
        public final static Property Block_name = new Property(9, String.class, "block_name", false, "BLOCK_NAME");
        public final static Property Ass_mobile = new Property(10, String.class, "ass_mobile", false, "ASS_MOBILE");
        public final static Property Category_id = new Property(11, int.class, "category_id", false, "CATEGORY_ID");
        public final static Property State_name = new Property(12, String.class, "state_name", false, "STATE_NAME");
        public final static Property Product_id = new Property(13, int.class, "product_id", false, "PRODUCT_ID");
        public final static Property Village_name = new Property(14, String.class, "village_name", false, "VILLAGE_NAME");
        public final static Property Grampanchayat_name = new Property(15, String.class, "grampanchayat_name", false, "GRAMPANCHAYAT_NAME");
        public final static Property AvialableQuantity = new Property(16, String.class, "avialableQuantity", false, "AVIALABLE_QUANTITY");
    }


    public ShgMemberDetailsDataDao(DaoConfig config) {
        super(config);
    }
    
    public ShgMemberDetailsDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHG_MEMBER_DETAILS_DATA\" (" + //
                "\"CATEGORY_NAME\" TEXT," + // 0: category_name
                "\"SHG_MEMBER_CODE\" TEXT," + // 1: shg_member_code
                "\"ASS_NAME\" TEXT," + // 2: ass_name
                "\"MOBILE\" TEXT," + // 3: mobile
                "\"SUBCATEGORY_NAME\" TEXT," + // 4: subcategory_name
                "\"MEMBER_NAME\" TEXT," + // 5: member_name
                "\"PRODUCT_NAME\" TEXT," + // 6: product_name
                "\"SUBCATEGORY_ID\" INTEGER NOT NULL ," + // 7: subcategory_id
                "\"DISTRICT_NAME\" TEXT," + // 8: district_name
                "\"BLOCK_NAME\" TEXT," + // 9: block_name
                "\"ASS_MOBILE\" TEXT," + // 10: ass_mobile
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 11: category_id
                "\"STATE_NAME\" TEXT," + // 12: state_name
                "\"PRODUCT_ID\" INTEGER NOT NULL ," + // 13: product_id
                "\"VILLAGE_NAME\" TEXT," + // 14: village_name
                "\"GRAMPANCHAYAT_NAME\" TEXT," + // 15: grampanchayat_name
                "\"AVIALABLE_QUANTITY\" TEXT);"); // 16: avialableQuantity
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHG_MEMBER_DETAILS_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShgMemberDetailsData entity) {
        stmt.clearBindings();
 
        String category_name = entity.getCategory_name();
        if (category_name != null) {
            stmt.bindString(1, category_name);
        }
 
        String shg_member_code = entity.getShg_member_code();
        if (shg_member_code != null) {
            stmt.bindString(2, shg_member_code);
        }
 
        String ass_name = entity.getAss_name();
        if (ass_name != null) {
            stmt.bindString(3, ass_name);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String subcategory_name = entity.getSubcategory_name();
        if (subcategory_name != null) {
            stmt.bindString(5, subcategory_name);
        }
 
        String member_name = entity.getMember_name();
        if (member_name != null) {
            stmt.bindString(6, member_name);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(7, product_name);
        }
        stmt.bindLong(8, entity.getSubcategory_id());
 
        String district_name = entity.getDistrict_name();
        if (district_name != null) {
            stmt.bindString(9, district_name);
        }
 
        String block_name = entity.getBlock_name();
        if (block_name != null) {
            stmt.bindString(10, block_name);
        }
 
        String ass_mobile = entity.getAss_mobile();
        if (ass_mobile != null) {
            stmt.bindString(11, ass_mobile);
        }
        stmt.bindLong(12, entity.getCategory_id());
 
        String state_name = entity.getState_name();
        if (state_name != null) {
            stmt.bindString(13, state_name);
        }
        stmt.bindLong(14, entity.getProduct_id());
 
        String village_name = entity.getVillage_name();
        if (village_name != null) {
            stmt.bindString(15, village_name);
        }
 
        String grampanchayat_name = entity.getGrampanchayat_name();
        if (grampanchayat_name != null) {
            stmt.bindString(16, grampanchayat_name);
        }
 
        String avialableQuantity = entity.getAvialableQuantity();
        if (avialableQuantity != null) {
            stmt.bindString(17, avialableQuantity);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShgMemberDetailsData entity) {
        stmt.clearBindings();
 
        String category_name = entity.getCategory_name();
        if (category_name != null) {
            stmt.bindString(1, category_name);
        }
 
        String shg_member_code = entity.getShg_member_code();
        if (shg_member_code != null) {
            stmt.bindString(2, shg_member_code);
        }
 
        String ass_name = entity.getAss_name();
        if (ass_name != null) {
            stmt.bindString(3, ass_name);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String subcategory_name = entity.getSubcategory_name();
        if (subcategory_name != null) {
            stmt.bindString(5, subcategory_name);
        }
 
        String member_name = entity.getMember_name();
        if (member_name != null) {
            stmt.bindString(6, member_name);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(7, product_name);
        }
        stmt.bindLong(8, entity.getSubcategory_id());
 
        String district_name = entity.getDistrict_name();
        if (district_name != null) {
            stmt.bindString(9, district_name);
        }
 
        String block_name = entity.getBlock_name();
        if (block_name != null) {
            stmt.bindString(10, block_name);
        }
 
        String ass_mobile = entity.getAss_mobile();
        if (ass_mobile != null) {
            stmt.bindString(11, ass_mobile);
        }
        stmt.bindLong(12, entity.getCategory_id());
 
        String state_name = entity.getState_name();
        if (state_name != null) {
            stmt.bindString(13, state_name);
        }
        stmt.bindLong(14, entity.getProduct_id());
 
        String village_name = entity.getVillage_name();
        if (village_name != null) {
            stmt.bindString(15, village_name);
        }
 
        String grampanchayat_name = entity.getGrampanchayat_name();
        if (grampanchayat_name != null) {
            stmt.bindString(16, grampanchayat_name);
        }
 
        String avialableQuantity = entity.getAvialableQuantity();
        if (avialableQuantity != null) {
            stmt.bindString(17, avialableQuantity);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ShgMemberDetailsData readEntity(Cursor cursor, int offset) {
        ShgMemberDetailsData entity = new ShgMemberDetailsData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // category_name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shg_member_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ass_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // subcategory_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // member_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // product_name
            cursor.getInt(offset + 7), // subcategory_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // district_name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // block_name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ass_mobile
            cursor.getInt(offset + 11), // category_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // state_name
            cursor.getInt(offset + 13), // product_id
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // village_name
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // grampanchayat_name
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // avialableQuantity
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShgMemberDetailsData entity, int offset) {
        entity.setCategory_name(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setShg_member_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAss_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSubcategory_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMember_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProduct_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSubcategory_id(cursor.getInt(offset + 7));
        entity.setDistrict_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBlock_name(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAss_mobile(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCategory_id(cursor.getInt(offset + 11));
        entity.setState_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setProduct_id(cursor.getInt(offset + 13));
        entity.setVillage_name(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGrampanchayat_name(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAvialableQuantity(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ShgMemberDetailsData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ShgMemberDetailsData entity) {
        return null;
    }

    @Override
    public boolean hasKey(ShgMemberDetailsData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
